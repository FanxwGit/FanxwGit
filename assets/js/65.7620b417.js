(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{394:function(s,a,t){"use strict";t.r(a);var n=t(3),i=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"存图方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存图方式"}},[s._v("#")]),s._v(" 存图方式")]),s._v(" "),a("p",[s._v("存图方式很多，介绍常用的两种：邻接表和邻接矩阵。")]),s._v(" "),a("h2",{attrs:{id:"邻接矩阵"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#邻接矩阵"}},[s._v("#")]),s._v(" 邻接矩阵")]),s._v(" "),a("p",[s._v("定义矩阵"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("g")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("i")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("j")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("g[i][j]")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03588em"}},[s._v("g")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal"},[s._v("i")]),a("span",{staticClass:"mclose"},[s._v("]")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.05724em"}},[s._v("j")]),a("span",{staticClass:"mclose"},[s._v("]")])])])]),s._v("，"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("g")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("i")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("j")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")]),a("mo",[s._v("=")]),a("mn",[s._v("1")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("g[i][j]=1")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03588em"}},[s._v("g")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal"},[s._v("i")]),a("span",{staticClass:"mclose"},[s._v("]")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.05724em"}},[s._v("j")]),a("span",{staticClass:"mclose"},[s._v("]")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2778em"}}),a("span",{staticClass:"mrel"},[s._v("=")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2778em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6444em"}}),a("span",{staticClass:"mord"},[s._v("1")])])])]),s._v("代表有一条从"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("i")]),a("mo",[s._v("−")]),a("mo",[s._v(">")]),a("mi",[s._v("j")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("i->j")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.7429em","vertical-align":"-0.0833em"}}),a("span",{staticClass:"mord mathnormal"},[s._v("i")]),a("span",{staticClass:"mord"},[s._v("−")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2778em"}}),a("span",{staticClass:"mrel"},[s._v(">")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2778em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.854em","vertical-align":"-0.1944em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.05724em"}},[s._v("j")])])])]),s._v("的边")]),s._v(" "),a("ul",[a("li",[s._v("性质\n"),a("ol",[a("li",[a("strong",[s._v("适用于稠密图")])]),s._v(" "),a("li",[s._v("如果是无向图，矩阵是对称的")])])])]),s._v(" "),a("h2",{attrs:{id:"图的遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图的遍历"}},[s._v("#")]),s._v(" 图的遍历")]),s._v(" "),a("p",[s._v("遍历的典型案例——走迷宫，可以看作是一个图，有4条出边。我们对图的遍历也是一样，每次遍历其所有的出边，不断遍历即可。")]),s._v(" "),a("ul",[a("li",[s._v("板子")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#include<bits/stdc++.h>\ntypedef long long ll;\nusing namespace std;\nconst int N=1e4+5;\nint g[N][N];//g[i][j]=1 代表有一条从i顶点到j顶点的一条边;\nint v[N];\nvoid add(int a,int b){//a顶点到b添加一条边;\n    g[a][b]=1;\n}\nvoid dfs(int x){\n    cout<<x;\n    v[x]=1;//标记这个点 防止重复走;\n    //遍历所有出边;\n    for(int i=1;i<=N;i++){\n        if(g[x][i] && !v[i]){ //每次遍历时，如果x到i有边 并且没走过，就继续递归;\n            dfs(i);\n        }\n    }\n}\n\n\nvoid bfs(int x){\n    //声明队列;\n    queue<int>q;\n    //起点入队;\n    q.push(x);\n    //入队标记;\n    v[x]=1;\n    //判断队列 while;\n    while(!q.empty()){\n        //先取出队头，弹出;\n        int t=q.front();\n        q.pop();\n        cout<<t;\n        for(int i=1;i<=N;i++){\n            //遍历队头的所有出边 且没有走过;\n            if(g[t][i] && !v[i]){\n                q.push(i);\n                v[i]=1;\n            }\n        }\n    }\n\n}\nint main() {\n    add(1,2);\n    add(1,3);\n    add(2,4);\n    add(3,4);\n    bfs(1);\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br")])]),a("h2",{attrs:{id:"邻接表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#邻接表"}},[s._v("#")]),s._v(" 邻接表")]),s._v(" "),a("p",[s._v("是一种顺序存储和链式存储相结合的存储结构，存的是边，"),a("strong",[s._v("适用于稀疏图")]),s._v("。")]),s._v(" "),a("p",[s._v("传统的邻接表一般用数组+指针节点构成链表的方式实现，但竞赛中由于动态申请内存太过耗费时间，因此选手一般选择用数组来实现邻接表，下面介绍两种方式邻接表实现方式。")]),s._v(" "),a("h3",{attrs:{id:"vector存图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vector存图"}},[s._v("#")]),s._v(" Vector存图")]),s._v(" "),a("p",[s._v("声明"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("v")]),a("mi",[s._v("e")]),a("mi",[s._v("c")]),a("mi",[s._v("t")]),a("mi",[s._v("o")]),a("mi",[s._v("r")]),a("mo",[s._v("<")]),a("mi",[s._v("v")]),a("mi",[s._v("e")]),a("mi",[s._v("c")]),a("mi",[s._v("t")]),a("mi",[s._v("o")]),a("mi",[s._v("r")]),a("mo",[s._v("<")]),a("mi",[s._v("i")]),a("mi",[s._v("n")]),a("mi",[s._v("t")]),a("mo",[s._v(">")]),a("mo",[s._v(">")]),a("mi",[s._v("g")]),a("mo",{attrs:{stretchy:"false"}},[s._v("(")]),a("mi",[s._v("n")]),a("mo",{attrs:{stretchy:"false"}},[s._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("vector<vector<int>>g(n)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6542em","vertical-align":"-0.0391em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03588em"}},[s._v("v")]),a("span",{staticClass:"mord mathnormal"},[s._v("ec")]),a("span",{staticClass:"mord mathnormal"},[s._v("t")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.02778em"}},[s._v("or")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2778em"}}),a("span",{staticClass:"mrel"},[s._v("<")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2778em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6542em","vertical-align":"-0.0391em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03588em"}},[s._v("v")]),a("span",{staticClass:"mord mathnormal"},[s._v("ec")]),a("span",{staticClass:"mord mathnormal"},[s._v("t")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.02778em"}},[s._v("or")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2778em"}}),a("span",{staticClass:"mrel"},[s._v("<")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2778em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6986em","vertical-align":"-0.0391em"}}),a("span",{staticClass:"mord mathnormal"},[s._v("in")]),a("span",{staticClass:"mord mathnormal"},[s._v("t")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2778em"}}),a("span",{staticClass:"mrel"},[s._v(">>")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2778em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03588em"}},[s._v("g")]),a("span",{staticClass:"mopen"},[s._v("(")]),a("span",{staticClass:"mord mathnormal"},[s._v("n")]),a("span",{staticClass:"mclose"},[s._v(")")])])])])]),s._v(" "),a("p",[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("g")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("x")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("g[x]")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03588em"}},[s._v("g")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal"},[s._v("x")]),a("span",{staticClass:"mclose"},[s._v("]")])])])]),s._v("是一个数组")]),s._v(" "),a("p",[s._v("数组"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("g")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("x")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("g[x]")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03588em"}},[s._v("g")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal"},[s._v("x")]),a("span",{staticClass:"mclose"},[s._v("]")])])])]),s._v("  里的元素"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("i")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("i")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6595em"}}),a("span",{staticClass:"mord mathnormal"},[s._v("i")])])])]),s._v("的含义是：存在"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("x")]),a("mo",[s._v("−")]),a("mo",[s._v(">")]),a("mi",[s._v("i")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("x->i")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6667em","vertical-align":"-0.0833em"}}),a("span",{staticClass:"mord mathnormal"},[s._v("x")]),a("span",{staticClass:"mord"},[s._v("−")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2778em"}}),a("span",{staticClass:"mrel"},[s._v(">")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2778em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6595em"}}),a("span",{staticClass:"mord mathnormal"},[s._v("i")])])])]),s._v("的边")]),s._v(" "),a("p",[s._v("（思考一下如何存储带权图？）")]),s._v(" "),a("ul",[a("li",[s._v("板子")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#include<bits/stdc++.h>\ntypedef long long ll;\nusing namespace std;\nconst int N=1e4;//顶点个数\nvector<vector<int>>g(N); //g[1].size() 代表什么？\nint v[N];\nvoid add(int a ,int b){\n    g[a].push_back(b);\n}\nvoid dfs(int x){\n    v[x]=1;\n    cout<<x<<endl;\n    for(int i=0;i<g[x].size();i++){\n        int j=g[x][i];\n        if(!v[j]){\n            dfs(j);\n        }\n    }\n}\nvoid bfs(int x){\n    queue<int>q;\n    q.push(x);\n    v[x]=1;\n    while(!q.empty()){\n        int t=q.front();\n        q.pop();\n        cout<<t<<endl;\n        for(int i=0;i<g[t].size();i++){\n            int j=g[t][i];//出边对应的点\n            if(!v[j]){\n                q.push(j);\n                v[j]=1;\n            }\n        }\n    }\n}\nint main() {\n    add(1,2);\n    add(1,3);\n    add(2,4);\n    add(3,4);\n    dfs(1);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br")])]),a("ul",[a("li",[s._v("2.0")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#include<bits/stdc++.h>\ntypedef long long ll;\nusing namespace std;\nconst int N=1e4;//顶点个数\nvector<vector<int>>g(N); //g[1].size() 代表什么？\nint v[N];\nvoid add(int a ,int b){\n    g[a].push_back(b);\n}\nvoid dfs(int x){\n    v[x]=1;\n    cout<<x<<endl;\n    for(int j:g[x]){\n        if(!v[j]){\n            dfs(j);\n        }\n    }\n}\nvoid bfs(int x){\n    queue<int>q;\n    q.push(x);\n    v[x]=1;\n    while(!q.empty()){\n        int t=q.front();\n        q.pop();\n        cout<<t<<endl;\n        for(int j:g[t]){\n            if(!v[j]){\n                q.push(j);\n                v[j]=1;\n            }\n        }\n    }\n}\nint main() {\n    add(1,2);\n    add(1,3);\n    add(2,4);\n    add(3,4);\n    dfs(1);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br")])]),a("h3",{attrs:{id:"链式前向星-推荐"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链式前向星-推荐"}},[s._v("#")]),s._v(" 链式前向星（推荐）")]),s._v(" "),a("p",[s._v("用静态数组实现邻接表，竞赛中常用。")]),s._v(" "),a("p",[s._v("创建三个数组分别是")]),s._v(" "),a("p",[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("h")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("i")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")]),a("mo",{attrs:{separator:"true"}},[s._v(",")]),a("mi",[s._v("e")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("i")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")]),a("mo",{attrs:{separator:"true"}},[s._v(",")]),a("mi",[s._v("n")]),a("mi",[s._v("e")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("i")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("h[i],e[i],ne[i]")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathnormal"},[s._v("h")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal"},[s._v("i")]),a("span",{staticClass:"mclose"},[s._v("]")]),a("span",{staticClass:"mpunct"},[s._v(",")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.1667em"}}),a("span",{staticClass:"mord mathnormal"},[s._v("e")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal"},[s._v("i")]),a("span",{staticClass:"mclose"},[s._v("]")]),a("span",{staticClass:"mpunct"},[s._v(",")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.1667em"}}),a("span",{staticClass:"mord mathnormal"},[s._v("n")]),a("span",{staticClass:"mord mathnormal"},[s._v("e")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal"},[s._v("i")]),a("span",{staticClass:"mclose"},[s._v("]")])])])])]),s._v(" "),a("ul",[a("li",[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("h")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("i")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("h[i]")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathnormal"},[s._v("h")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal"},[s._v("i")]),a("span",{staticClass:"mclose"},[s._v("]")])])])]),s._v("：结点"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("i")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("i")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6595em"}}),a("span",{staticClass:"mord mathnormal"},[s._v("i")])])])]),s._v("的下一条"),a("strong",[s._v("边序号")]),s._v("，最开始默认是"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mo",[s._v("−")]),a("mn",[s._v("1")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("-1")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.7278em","vertical-align":"-0.0833em"}}),a("span",{staticClass:"mord"},[s._v("−")]),a("span",{staticClass:"mord"},[s._v("1")])])])]),s._v("，代表")]),s._v(" "),a("li",[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("e")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("i")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("e[i]")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathnormal"},[s._v("e")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal"},[s._v("i")]),a("span",{staticClass:"mclose"},[s._v("]")])])])]),s._v("：第"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("i")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("i")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6595em"}}),a("span",{staticClass:"mord mathnormal"},[s._v("i")])])])]),s._v("条边所指向的节点编号")]),s._v(" "),a("li",[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("n")]),a("mi",[s._v("e")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("i")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("ne[i]")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathnormal"},[s._v("n")]),a("span",{staticClass:"mord mathnormal"},[s._v("e")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal"},[s._v("i")]),a("span",{staticClass:"mclose"},[s._v("]")])])])]),s._v("：第"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("i")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("i")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6595em"}}),a("span",{staticClass:"mord mathnormal"},[s._v("i")])])])]),s._v("条边所指向的节点的下一条出边"),a("strong",[s._v("边序号")])])]),s._v(" "),a("p",[s._v("举个例子~")]),s._v(" "),a("p",[a("img",{attrs:{src:"%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84.assets/image-20210910102936536.png",alt:"image-20210910102936536"}})]),s._v(" "),a("ul",[a("li",[s._v("板子")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#include<bits/stdc++.h>\ntypedef long long ll;\nusing namespace std;\nconst int N=1e5+5;//顶点数;\nint h[N],e[N],ne[N],idx;\nint v[N];\n//idx边序号,由我们输入的次序决定,用来标记边信息;\n//h[i]顶点i下一条出边的  边序号;\n//e[i]边序号为i的边 指向的点;\n//ne[i]边序号为i的边 下一条边（从顶点出发的边~~）的序号;\nvoid add(int a,int b){\n    e[idx]=b,ne[idx]=h[a],h[a]=idx++;\n}\nvoid dfs(int x){\n    v[x]=1;\n    cout<<x;\n    //遍历x的所有出边,i代表边序号  ;\n    for(int i=h[x];i!=-1;i=ne[i]){\n        int j=e[i];\n        if(!v[j]){\n            dfs(j);\n        }\n    }\n}\nvoid bfs(int x){\n    queue<int>q;\n    q.push(x),v[x]=1;\n    while(!q.empty()){\n        int t=q.front();\n        q.pop();\n        cout<<t;\n        for(int i=h[t];i!=-1;i=ne[i]){\n            int j=e[i];\n            if(!v[j]){\n                q.push(j),v[j]=1;\n            }\n        }\n    }\n}\nint main() {\n    memset(h,-1,sizeof h);//很重要！！！\n    add(1,2);\n    add(1,3);\n    add(2,4);\n    add(3,4);\n    bfs(1);\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br")])]),a("h2",{attrs:{id:"链式前向星和vector建图的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链式前向星和vector建图的比较"}},[s._v("#")]),s._v(" 链式前向星和vector建图的比较")]),s._v(" "),a("ul",[a("li",[s._v("链式前向星优点:\n"),a("ol",[a("li",[s._v("在不开O2优化的情况下比vector快很多")]),s._v(" "),a("li",[s._v("O(1)时间删边")])])]),s._v(" "),a("li",[s._v("vector建图优点\n"),a("ol",[a("li",[s._v("方便对点，和权，进行排序")]),s._v(" "),a("li",[s._v("便于理解")])])])]),s._v(" "),a("p",[s._v("选手一般两种都要掌握，后续算法演示都是用链式前向星建图。就再开一条数组，用idx维护就好了，个人认为这个方法比较好理解")]),s._v(" "),a("h1",{attrs:{id:"floyd多源最短路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#floyd多源最短路"}},[s._v("#")]),s._v(" Floyd多源最短路")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("Floyd")]),s._v("：每两个点之间，可以通过中转到达，所以每次都不断的更新两点之间的新路线，k是代表目前已经中转过的点，比如k=3的时候，每一个点到其他点的路线，都已经在k=1，k=2的时候"),a("strong",[s._v("松弛")]),s._v("过了。")]),s._v(" "),a("li",[s._v("核心思维：动态规划，转移方程为："),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("f")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("k")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("i")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("j")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")]),a("mo",[s._v("=")]),a("mi",[s._v("m")]),a("mi",[s._v("i")]),a("mi",[s._v("n")]),a("mo",{attrs:{stretchy:"false"}},[s._v("(")]),a("mi",[s._v("f")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("k")]),a("mo",[s._v("−")]),a("mn",[s._v("1")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("i")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("j")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")]),a("mo",{attrs:{separator:"true"}},[s._v(",")]),a("mi",[s._v("f")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("k")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("i")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("k")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")]),a("mo",[s._v("+")]),a("mi",[s._v("f")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("k")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("k")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")]),a("mo",{attrs:{stretchy:"false"}},[s._v("[")]),a("mi",[s._v("i")]),a("mo",{attrs:{stretchy:"false"}},[s._v("]")]),a("mo",{attrs:{stretchy:"false"}},[s._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("f[k][i][j]=min(f[k-1][i][j],f[k][i][k]+f[k][k][i])")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.10764em"}},[s._v("f")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03148em"}},[s._v("k")]),a("span",{staticClass:"mclose"},[s._v("]")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal"},[s._v("i")]),a("span",{staticClass:"mclose"},[s._v("]")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.05724em"}},[s._v("j")]),a("span",{staticClass:"mclose"},[s._v("]")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2778em"}}),a("span",{staticClass:"mrel"},[s._v("=")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2778em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathnormal"},[s._v("min")]),a("span",{staticClass:"mopen"},[s._v("(")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.10764em"}},[s._v("f")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03148em"}},[s._v("k")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222em"}}),a("span",{staticClass:"mbin"},[s._v("−")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord"},[s._v("1")]),a("span",{staticClass:"mclose"},[s._v("]")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal"},[s._v("i")]),a("span",{staticClass:"mclose"},[s._v("]")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.05724em"}},[s._v("j")]),a("span",{staticClass:"mclose"},[s._v("]")]),a("span",{staticClass:"mpunct"},[s._v(",")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.1667em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.10764em"}},[s._v("f")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03148em"}},[s._v("k")]),a("span",{staticClass:"mclose"},[s._v("]")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal"},[s._v("i")]),a("span",{staticClass:"mclose"},[s._v("]")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03148em"}},[s._v("k")]),a("span",{staticClass:"mclose"},[s._v("]")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222em"}}),a("span",{staticClass:"mbin"},[s._v("+")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.10764em"}},[s._v("f")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03148em"}},[s._v("k")]),a("span",{staticClass:"mclose"},[s._v("]")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03148em"}},[s._v("k")]),a("span",{staticClass:"mclose"},[s._v("]")]),a("span",{staticClass:"mopen"},[s._v("[")]),a("span",{staticClass:"mord mathnormal"},[s._v("i")]),a("span",{staticClass:"mclose"},[s._v("])")])])])]),s._v("，因为后面的每一步都是基于前面的不断更新，比如1->4本身是没有路，但是1可以经过2，3中转，从而变相的产生了一条1->4的路线。")]),s._v(" "),a("li",[s._v("优点：")]),s._v(" "),a("li",[s._v("缺点：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\tfor (int k = 1; k <= n; k++) {//表示这个点能够进行中转\n\t\tfor (int j = 1; j <= n; j++) {//从j 到 k \n\t\t\tfor (int i = 1; i <= n; i/++) {\n\t\t\t\tif (r[j][i] > r[j][k] + r[k][i]) {\n\t\t\t\t\tr[j][i] = r[j][k] + r[k][i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h1",{attrs:{id:"朴素dijkstra"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#朴素dijkstra"}},[s._v("#")]),s._v(" 朴素Dijkstra")]),s._v(" "),a("h2",{attrs:{id:"核心思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心思想"}},[s._v("#")]),s._v(" 核心思想")]),s._v(" "),a("p",[s._v("贪心，对于起点到别的点，一开始而言，起点到各个点的距离是固定的，因为我们只能从起点出发，因此当前起点"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("i")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("i")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6595em"}}),a("span",{staticClass:"mord mathnormal"},[s._v("i")])])])]),s._v("最小的出边，一定是最短路，因为，"),a("strong",[s._v("如果选择其他路走")]),s._v("那么一定会比这条路大。")]),s._v(" "),a("h2",{attrs:{id:"算法步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法步骤"}},[s._v("#")]),s._v(" 算法步骤")]),s._v(" "),a("ol",[a("li",[s._v("固定起点，找起点的最短一条出边，并且固定其出边到达的顶点"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("j")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("j")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.854em","vertical-align":"-0.1944em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.05724em"}},[s._v("j")])])])]),s._v(".")]),s._v(" "),a("li",[s._v("这里我们可以看作起点和顶点"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("j")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("j")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.854em","vertical-align":"-0.1944em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.05724em"}},[s._v("j")])])])]),s._v("长生了一条新的通路，我们再比较"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("j")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("j")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.854em","vertical-align":"-0.1944em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.05724em"}},[s._v("j")])])])]),s._v("的到其他顶点的距离，和自己到其他顶点的距离哪个大，因为起点到"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[s._v("j")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("j")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.854em","vertical-align":"-0.1944em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.05724em"}},[s._v("j")])])])]),s._v("的那条路已经是我们确定的"),a("strong",[s._v("最短路")]),s._v("了，再找起点的最短出边。"),a("strong",[s._v("（我们贪心最短的路，因此不能判断负权边）")])])]),s._v(" "),a("ul",[a("li",[s._v("时间复杂度 O(n^2)")]),s._v(" "),a("li",[s._v("临接数组实现Dijkstra:")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#include<bits/stdc++.h>\nusing namespace std;\nconst int N=505;\nint r[N][N];\nint n,m;\nint v[N],dis[N];\nint dj(){\n   memset(dis,0x3f,sizeof dis);\n   dis[1]=0;\n   for(int i=1;i<=n;i++){\n       int t=-1;\n       for(int j=1;j<=n;j++){\n           if(!v[j] && (t==-1 || dis[t]>dis[j])){\n               t=j;\n           }\n       }\n      v[t]=1;\n      for(int j=1;j<=n;j++){\n          dis[j]=min(dis[j],dis[t]+r[t][j]);\n      }\n   }\n   if(dis[n]==0x3f3f3f3f)return -1;\n   else return dis[n];\n   \n}\nint main(){\n    memset(r,0x3f,sizeof r);\n    cin>>n>>m;\n    for(int i=1;i<=m;i++){\n        int a,b,c;\n        cin>>a>>b>>c;\n        r[a][b]=min(r[a][b],c);\n    }\n    cout<<dj();\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br")])]),a("h1",{attrs:{id:"堆优化dijkstra"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆优化dijkstra"}},[s._v("#")]),s._v(" 堆优化Dijkstra")]),s._v(" "),a("h2",{attrs:{id:"算法思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法思路"}},[s._v("#")]),s._v(" 算法思路")]),s._v(" "),a("p",[s._v("由于我们每一次都是找最近的一个点，所以考虑用堆（优先队列）去维护最近的一条边。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2e5+5;\ntypedef long long ll;\ntypedef pair<int,int> pii;\nint n,m;\nint e[N],h[N],w[N],ne[N],idx,v[N],dis[N];\nvoid add(int a,int b,int c){\n    e[idx]=b,w[idx]=c;\n    ne[idx]=h[a],h[a]=idx++;\n}\nint dj(){\n    memset(dis,0x3f,sizeof dis);\n    priority_queue<pii,vector<pii>,greater<pii>>q; //升序 小根堆\n    q.push({0,1});\n    while(!q.empty()){\n        pii t=q.top();\n        q.pop();\n        int ver=t.second,d=t.first;\n        if(v[ver])continue;\n        v[ver]=1;\n        for(int i=h[ver];i!=-1;i=ne[i]){\n            int j=e[i];\n            if(dis[j]>d+w[i]){\n                dis[j]=d+w[i];\n                q.push({dis[j],j});\n            }\n        }\n    }\n    if(dis[n]==0x3f3f3f3f){\n        return -1;\n    }\n    else{\n        return dis[n];\n    }\n}\n\nint main(){\n    memset(h,-1,sizeof h);\n    cin>>n>>m;\n    for(int i=1;i<=m;i++){\n        int a,b,c;\n        cin>>a>>b>>c;\n        add(a,b,c);\n    }\n    cout<<dj();\n\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br")])]),a("h1",{attrs:{id:"bellman-ford"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bellman-ford"}},[s._v("#")]),s._v(" Bellman_ford")]),s._v(" "),a("h2",{attrs:{id:"算法思路-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法思路-2"}},[s._v("#")]),s._v(" 算法思路")]),s._v(" "),a("p",[a("strong",[s._v("只要遍历边")]),s._v(",不断遍历每一条边，松弛该边连接得两点和起点的距离，但是为了避免"),a("strong",[s._v("串联操作")]),s._v("用一个临时数组来维护。")]),s._v(" "),a("p",[s._v("相比于性能而言，spfa往往会更加优秀，但是Bellman_ford算法能够解决一个很经典的问题——有边数限制的最短路")]),s._v(" "),a("h2",{attrs:{id:"典型例题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#典型例题"}},[s._v("#")]),s._v(" 典型例题")]),s._v(" "),a("p",[s._v("题意大概是这样：最多经过k条边，可能存在闭环和重边，边权可能为负数，求起点到终点的最短距离。")]),s._v(" "),a("p",[s._v("首先我们要明确的一点是，存在负权边一定没有最短路径，并且最短路径是一个不包含回路的最短路径，因此最多经过n-1条边")]),s._v(" "),a("h2",{attrs:{id:"例题代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例题代码"}},[s._v("#")]),s._v(" 例题代码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=505;\nint n,m,k;\nint dis[N];\nstruct node{\n    int a,b,c;\n}r[10005];\nvoid bellman_ford(){\n    memset(dis,0x3f,sizeof dis);\n    dis[1]=0;\n    int cp[N]={};\n    for(int i=1;i<=k;i++){\n        memcpy(cp,dis,sizeof dis);\n        for(int j=1;j<=m;j++){\n            int a=r[j].a,b=r[j].b,c=r[j].c;\n            if(dis[b]>cp[a]+c)dis[b]=cp[a]+c;\n        }\n    }\n    if(dis[n]>0x3f3f3f3f/2)cout<<"impossible"<<endl;\n    else cout<<dis[n]<<endl;\n}\nint main(){\n    scanf("%d%d%d",&n,&m,&k);\n    for(int i=1;i<=m;++i){\n        int a,b,c;\n        scanf("%d%d%d",&a,&b,&c);\n        r[i]={a,b,c};\n    }\n    bellman_ford();\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])]),a("h1",{attrs:{id:"spfa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spfa"}},[s._v("#")]),s._v(" SPFA")]),s._v(" "),a("p",[s._v("是对Bellman_ford 算法用队列做一个优化，因为原本的bellman_ford算法遍历了很多边，但是并未产生更新效果。")]),s._v(" "),a("p",[s._v("因为更新的本质是，某个点被更新了，出边所涉及的点的距离起点的距离都有可能做出改变，那么未更新的边其实际上根本没有去遍历的必要所以根据此思路，就产生了spfa算法。")]),s._v(" "),a("h2",{attrs:{id:"算法思路-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法思路-3"}},[s._v("#")]),s._v(" 算法思路")]),s._v(" "),a("p",[s._v("算法思路：用一个被更新过的点A，将A的所有出边对应的点放进队列继续更新。")]),s._v(" "),a("h2",{attrs:{id:"经典例题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#经典例题"}},[s._v("#")]),s._v(" 经典例题")]),s._v(" "),a("h3",{attrs:{id:"最短路问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最短路问题"}},[s._v("#")]),s._v(" 最短路问题")]),s._v(" "),a("p",[s._v("spfa常常用于解决可能带有负权边的最短路问题")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#include<bits/stdc++.h>\nusing namespace  std;\nconst int N=1e5+5;\nconst int inf =0x3f3f3f3f;\nint n,m,v[N],e[N],ne[N],w[N],idx,dis[N],h[N];\nvoid add(int a,int b,int c){\n    e[idx]=b,w[idx]=c;\n    ne[idx]=h[a],h[a]=idx++;\n}\nvoid spfa(){\n    memset(dis,0x3f,sizeof dis);\n    queue<int>q;\n    q.push(1);\n    dis[1]=0;\n    while(!q.empty()){\n        int t=q.front();\n        q.pop();\n        v[t]=0;//用来是否已在队列里面，如果已经在了，就不要反复添加。 可以提高效率\n        for(int i=h[t];i!=-1;i=ne[i]){\n            int j=e[i];\n            if(dis[j]>dis[t]+w[i]){\n                dis[j]=dis[t]+w[i];\n                if(!v[j])q.push(j),v[j]=1;\n            }\n        }\n    }\n    if(dis[n]>inf/2)cout<<"impossible";\n    else cout<<dis[n];\n}\nint main(){\n    memset(h,-1,sizeof h);\n    cin>>n>>m;\n    for(int i=1;i<=m;i++){\n        int a,b,c;\n        cin>>a>>b>>c;\n        add(a,b,c);\n    }\n    spfa();\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br")])]),a("h3",{attrs:{id:"负权环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#负权环"}},[s._v("#")]),s._v(" 负权环")]),s._v(" "),a("p",[s._v("由于存在负权环，因此不存在对应的最短路，但是spfa可以解决负权边的最带路问题，因此可以考虑用spfa来判断是否存在负权环。")]),s._v(" "),a("ul",[a("li",[s._v("负环的判定原理")])]),s._v(" "),a("p",[s._v("我们只需要明白，一个n个点构成的图里的一条最短路径，路径边数不能>=n。")]),s._v(" "),a("p",[s._v('所以如果在求最短路的过程之中出现了某个“路径"不断变短，且这条路径的边数已经>=n，那么就表明此图存在负环。')]),s._v(" "),a("ul",[a("li",[s._v("算法步骤：用cnt来记录经过的边数，用dis来维护各点的一个相对距离，如果这个距离不断地在减少，并且经过的边数>=n，那么就一定有负环存在")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=1e5+5;\nint n ,m;\nint e[N],ne[N],w[N],idx,h[N],dis[N],v[N];\nint cnt[N];\nvoid add(int a,int b ,int c){\n    e[idx]=b,w[idx]=c;\n    ne[idx]=h[a],h[a]=idx++;\n}\n//spfa 是 bellmen_ford 的队列优化，利用了bfs的思想\nvoid spfa(){\n    memset(dis,0x3f,sizeof dis);\n    queue<int>q;\n    for(int i=1;i<=n;i++){\n        q.push(i);\n        v[i]=1;\n    }\n    while(!q.empty()){\n        int t=q.front();\n        q.pop();\n        v[t]=0;\n        for(int i=h[t];i!=-1;i=ne[i]){\n            int j=e[i];\n            if(w[i]+dis[t]<dis[j]){\n                dis[j]=w[i]+dis[t];\n                cnt[j]=cnt[t]+1;\n                if(cnt[j]>=n){\n                    cout<<"Yes";\n                    return ;\n                }\n                if(!v[j]){\n                    q.push(j);\n                    v[j]=1;\n                }\n            }\n        }\n    }\n    cout<<"No";\n}\n\nint main(){\n    memset(h,-1,sizeof h);\n    cin>>n>>m;\n    for(int i=1;i<=m;i++){\n        int a,b,c;\n        cin>>a>>b>>c;\n        add(a,b,c);\n    }\n    spfa();\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br")])])])}),[],!1,null,null,null);a.default=i.exports}}]);